diff --git a/build/azure-pipelines/linux/setup-env.sh b/build/azure-pipelines/linux/setup-env.sh
index 9bfbf9ab41a..3064f783d8c 100755
--- a/build/azure-pipelines/linux/setup-env.sh
+++ b/build/azure-pipelines/linux/setup-env.sh
@@ -7,6 +7,10 @@ if [ "$SYSROOT_ARCH" == "x64" ]; then
   SYSROOT_ARCH="amd64"
 fi
 
+if [ "$npm_config_arch" == "riscv64" ]; then
+  exit 0
+fi
+
 export VSCODE_SYSROOT_DIR=$PWD/.build/sysroots
 SYSROOT_ARCH="$SYSROOT_ARCH" node -e '(async () => { const { getVSCodeSysroot } = require("./build/linux/debian/install-sysroot.js"); await getVSCodeSysroot(process.env["SYSROOT_ARCH"]); })()'
 
@@ -67,4 +71,19 @@ elif [ "$npm_config_arch" == "arm" ]; then
     export VSCODE_REMOTE_CXXFLAGS="--sysroot=$VSCODE_SYSROOT_DIR/arm-rpi-linux-gnueabihf/arm-rpi-linux-gnueabihf/sysroot"
     export VSCODE_REMOTE_LDFLAGS="--sysroot=$VSCODE_SYSROOT_DIR/arm-rpi-linux-gnueabihf/arm-rpi-linux-gnueabihf/sysroot -L$VSCODE_SYSROOT_DIR/arm-rpi-linux-gnueabihf/arm-rpi-linux-gnueabihf/sysroot/usr/lib/arm-linux-gnueabihf -L$VSCODE_SYSROOT_DIR/arm-rpi-linux-gnueabihf/arm-rpi-linux-gnueabihf/sysroot/lib/arm-linux-gnueabihf"
   fi
+elif [ "$npm_config_arch" == "ppc64" ]; then
+  if [ "$(echo "$@" | grep -c -- "--only-remote")" -eq 0 ]; then
+    # Set compiler toolchain for client native modules
+    export CC=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/bin/powerpc64le-linux-gnu-gcc
+    export CXX=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/bin/powerpc64le-linux-gnu-g++
+    export CXXFLAGS="--sysroot=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot"
+    export LDFLAGS="--sysroot=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot -L$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot/usr/lib/powerpc64le-linux-gnu -L$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot/lib/powerpc64le-linux-gnu"
+
+    # Set compiler toolchain for remote server
+    export VSCODE_REMOTE_CC=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/bin/powerpc64le-linux-gnu-gcc
+    export VSCODE_REMOTE_CXX=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/bin/powerpc64le-linux-gnu-g++
+    export VSCODE_REMOTE_CXXFLAGS="--sysroot=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot"
+    export VSCODE_REMOTE_LDFLAGS="--sysroot=$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot -L$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot/usr/lib/powerpc64le-linux-gnu -L$VSCODE_SYSROOT_DIR/powerpc64le-linux-gnu/powerpc64le-linux-gnu/sysroot/lib/powerpc64le-linux-gnu"
+  fi
+
 fi
diff --git a/build/azure-pipelines/linux/verify-glibc-requirements.sh b/build/azure-pipelines/linux/verify-glibc-requirements.sh
index f07c0ba71b0..1cb257b33ec 100755
--- a/build/azure-pipelines/linux/verify-glibc-requirements.sh
+++ b/build/azure-pipelines/linux/verify-glibc-requirements.sh
@@ -7,6 +7,8 @@ if [ "$VSCODE_ARCH" == "arm64" ]; then
   TRIPLE="aarch64-linux-gnu"
 elif [ "$VSCODE_ARCH" == "armhf" ]; then
   TRIPLE="arm-rpi-linux-gnueabihf"
+elif [ "$VSCODE_ARCH" == "ppc64le" ]; then
+  TRIPLE="powerpc64le-linux-gnu"
 fi
 
 # Get all files with .node extension from remote/node_modules folder
diff --git a/build/checksums/vscode-sysroot.txt b/build/checksums/vscode-sysroot.txt
index 0b5f38c60ce..9f3b02beee3 100644
--- a/build/checksums/vscode-sysroot.txt
+++ b/build/checksums/vscode-sysroot.txt
@@ -4,3 +4,4 @@
 7aea163f7fad8cc50000c86b5108be880121d35e2f55d016ef8c96bbe54129eb  arm-rpi-linux-gnueabihf-glibc-2.28.tar.gz
 5aae21115f1d284c3cdf32c83db15771b59bc80793f1423032abf5a823c0d658  x86_64-linux-gnu-glibc-2.17.tar.gz
 dbb927408393041664a020661f2641c9785741be3d29b050b9dac58980967784  x86_64-linux-gnu-glibc-2.28.tar.gz
+fa8176d27be18bb0eeb7f55b0fa22255050b430ef68c29136599f02976eb0b1b  powerpc64le-linux-gnu-glibc-2.28.tar.gz
diff --git a/build/gulpfile.reh.js b/build/gulpfile.reh.js
index c2b81d0cf7c..fa5de83a076 100644
--- a/build/gulpfile.reh.js
+++ b/build/gulpfile.reh.js
@@ -44,6 +44,8 @@ const BUILD_TARGETS = [
 	{ platform: 'linux', arch: 'x64' },
 	{ platform: 'linux', arch: 'armhf' },
 	{ platform: 'linux', arch: 'arm64' },
+	{ platform: 'linux', arch: 'ppc64le' },
+	{ platform: 'linux', arch: 'riscv64' },
 	{ platform: 'alpine', arch: 'arm64' },
 	// legacy: we use to ship only one alpine so it was put in the arch, but now we ship
 	// multiple alpine images and moved to a better model (alpine as the platform)
@@ -210,6 +212,14 @@ function nodejs(platform, arch) {
 				.pipe(rename('node.exe'));
 		case 'darwin':
 		case 'linux':
+			if (arch === 'riscv64') {
+				return fetchUrls(`/download/release/v${nodeVersion}/node-v${nodeVersion}-${platform}-${arch}.tar.gz`,
+					{ base: 'https://unofficial-builds.nodejs.org', checksumSha256 }).pipe(flatmap(stream => stream.pipe(gunzip()).pipe
+						(untar())))
+					.pipe(filter('**/node'))
+					.pipe(util.setExecutableBit('**'))
+					.pipe(rename('node'));
+			}
 			return (product.nodejsRepository !== 'https://nodejs.org' ?
 				fetchGithub(product.nodejsRepository, { version: `${nodeVersion}-${internalNodeVersion}`, name: `node-v${nodeVersion}${glibcPrefix}-${platform}-${arch}.tar.gz`, checksumSha256 }) :
 				fetchUrls(`/dist/v${nodeVersion}/node-v${nodeVersion}-${platform}-${arch}.tar.gz`, { base: 'https://nodejs.org', checksumSha256 })
diff --git a/build/gulpfile.scan.js b/build/gulpfile.scan.js
index 6f8144b0954..8a8195e9b66 100644
--- a/build/gulpfile.scan.js
+++ b/build/gulpfile.scan.js
@@ -24,6 +24,8 @@ const BUILD_TARGETS = [
 	{ platform: 'linux', arch: 'x64' },
 	{ platform: 'linux', arch: 'armhf' },
 	{ platform: 'linux', arch: 'arm64' },
+	{ platform: 'linux', arch: 'ppc64le' },
+	{ platform: 'linux', arch: 'riscv64' },
 ];
 
 BUILD_TARGETS.forEach(buildTarget => {
diff --git a/build/gulpfile.vscode.js b/build/gulpfile.vscode.js
index 3b1aeafd080..8363dae382c 100644
--- a/build/gulpfile.vscode.js
+++ b/build/gulpfile.vscode.js
@@ -339,11 +339,21 @@ function packageTask(platform, arch, sourceFolderName, destinationFolderName, op
 			all = es.merge(all, shortcut);
 		}
 
+		const electronOverride = {};
+		if (process.env.VSCODE_ELECTRON_REPO) {
+			// electron doesn't support riscv64 and ppc64le, override the repo with `VSCODE_ELECTRON_REPO`.
+			electronOverride.repo = process.env.VSCODE_ELECTRON_REPO;
+		}
+
+		if (process.env.VSCODE_ELECTRON_TAG) {
+			electronOverride.tag = process.env.VSCODE_ELECTRON_TAG;
+		}
+
 		let result = all
 			.pipe(util.skipDirectories())
 			.pipe(util.fixWin32DirectoryPermissions())
 			.pipe(filter(['**', '!**/.github/**'], { dot: true })) // https://github.com/microsoft/vscode/issues/116523
-			.pipe(electron({ ...config, platform, arch: arch === 'armhf' ? 'arm' : arch, ffmpegChromium: false }))
+			.pipe(electron({ ...config, ...electronOverride, platform, arch: arch === 'armhf' ? 'arm' : arch, ffmpegChromium: false }))
 			.pipe(filter(['**', '!LICENSE', '!version'], { dot: true }));
 
 		if (platform === 'linux') {
@@ -432,6 +442,8 @@ const BUILD_TARGETS = [
 	{ platform: 'linux', arch: 'x64' },
 	{ platform: 'linux', arch: 'armhf' },
 	{ platform: 'linux', arch: 'arm64' },
+	{ platform: 'linux', arch: 'ppc64le' },
+	{ platform: 'linux', arch: 'riscv64' },
 ];
 BUILD_TARGETS.forEach(buildTarget => {
 	const dashed = (str) => (str ? `-${str}` : ``);
diff --git a/build/gulpfile.vscode.linux.js b/build/gulpfile.vscode.linux.js
index 8c2b62f7b2a..2ddc1226f49 100644
--- a/build/gulpfile.vscode.linux.js
+++ b/build/gulpfile.vscode.linux.js
@@ -28,7 +28,7 @@ const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
  * @param {string} arch
  */
 function getDebPackageArch(arch) {
-	return { x64: 'amd64', armhf: 'armhf', arm64: 'arm64' }[arch];
+	return { x64: 'amd64', armhf: 'armhf', arm64: 'arm64', ppc64le: 'ppc64el', riscv64: 'riscv64' }[arch];
 }
 
 function prepareDebPackage(arch) {
@@ -134,7 +134,7 @@ function getRpmBuildPath(rpmArch) {
  * @param {string} arch
  */
 function getRpmPackageArch(arch) {
-	return { x64: 'x86_64', armhf: 'armv7hl', arm64: 'aarch64' }[arch];
+	return { x64: 'x86_64', armhf: 'armv7hl', arm64: 'aarch64', ppc64le: 'ppc64le', riscv64: 'riscv64' }[arch];
 }
 
 /**
@@ -295,6 +295,8 @@ const BUILD_TARGETS = [
 	{ arch: 'x64' },
 	{ arch: 'armhf' },
 	{ arch: 'arm64' },
+	{ arch: 'ppc64le' },
+	{ arch: 'riscv64' },
 ];
 
 BUILD_TARGETS.forEach(({ arch }) => {
diff --git a/build/linux/debian/calculate-deps.js b/build/linux/debian/calculate-deps.js
index bbcb6bfc3de..d00158f3de4 100644
--- a/build/linux/debian/calculate-deps.js
+++ b/build/linux/debian/calculate-deps.js
@@ -49,6 +49,12 @@ function calculatePackageDeps(binaryPath, arch, chromiumSysroot, vscodeSysroot)
         case 'arm64':
             cmd.push(`-l${chromiumSysroot}/usr/lib/aarch64-linux-gnu`, `-l${chromiumSysroot}/lib/aarch64-linux-gnu`, `-l${vscodeSysroot}/usr/lib/aarch64-linux-gnu`, `-l${vscodeSysroot}/lib/aarch64-linux-gnu`);
             break;
+		case 'ppc64el':
+			cmd.push(`-l${chromiumSysroot}/usr/lib/powerpc64le-linux-gnu`, `-l${chromiumSysroot}/lib/powerpc64le-linux-gnu`, `-l${vscodeSysroot}/usr/lib/powerpc64le-linux-gnu`, `-l${vscodeSysroot}/lib/powerpc64le-linux-gnu`);
+			break;
+		case 'riscv64':
+			cmd.push(`-l${chromiumSysroot}/usr/lib/riscv64-linux-gnu`, `-l${chromiumSysroot}/lib/riscv64-linux-gnu`, `-l${vscodeSysroot}/usr/lib/riscv64-linux-gnu`, `-l${vscodeSysroot}/lib/riscv64-linux-gnu`);
+			break;
     }
     cmd.push(`-l${chromiumSysroot}/usr/lib`);
     cmd.push(`-L${vscodeSysroot}/debian/libxkbfile1/DEBIAN/shlibs`);
diff --git a/build/linux/debian/calculate-deps.ts b/build/linux/debian/calculate-deps.ts
index 92f8065f262..b86b4dba2b8 100644
--- a/build/linux/debian/calculate-deps.ts
+++ b/build/linux/debian/calculate-deps.ts
@@ -59,6 +59,18 @@ function calculatePackageDeps(binaryPath: string, arch: DebianArchString, chromi
 				`-l${vscodeSysroot}/usr/lib/aarch64-linux-gnu`,
 				`-l${vscodeSysroot}/lib/aarch64-linux-gnu`);
 			break;
+		case 'ppc64el':
+			cmd.push(`-l${chromiumSysroot}/usr/lib/powerpc64le-linux-gnu`,
+				`-l${chromiumSysroot}/lib/powerpc64le-linux-gnu`,
+				`-l${vscodeSysroot}/usr/lib/powerpc64le-linux-gnu`,
+				`-l${vscodeSysroot}/lib/powerpc64le-linux-gnu`);
+			break;
+		case 'riscv64':
+			cmd.push(`-l${chromiumSysroot}/usr/lib/riscv64-linux-gnu`,
+				`-l${chromiumSysroot}/lib/riscv64-linux-gnu`,
+				`-l${vscodeSysroot}/usr/lib/riscv64-linux-gnu`,
+				`-l${vscodeSysroot}/lib/riscv64-linux-gnu`);
+			break;
 	}
 	cmd.push(`-l${chromiumSysroot}/usr/lib`);
 	cmd.push(`-L${vscodeSysroot}/debian/libxkbfile1/DEBIAN/shlibs`);
diff --git a/build/linux/debian/dep-lists.js b/build/linux/debian/dep-lists.js
index d843c090063..3b869cbbe6d 100644
--- a/build/linux/debian/dep-lists.js
+++ b/build/linux/debian/dep-lists.js
@@ -139,6 +139,85 @@ exports.referenceGeneratedDepsByArch = {
         'libxkbfile1 (>= 1:1.1.0)',
         'libxrandr2',
         'xdg-utils (>= 1.0.2)'
+    ],
+	'ppc64el': [
+        'ca-certificates',
+        'libasound2 (>= 1.0.17)',
+        'libatk-bridge2.0-0 (>= 2.5.3)',
+        'libatk1.0-0 (>= 2.2.0)',
+        'libatspi2.0-0 (>= 2.9.90)',
+        'libc6 (>= 2.17)',
+        'libc6 (>= 2.28)',
+        'libcairo2 (>= 1.6.0)',
+        'libcurl3-gnutls | libcurl3-nss | libcurl4 | libcurl3',
+        'libdbus-1-3 (>= 1.9.14)',
+        'libdrm2 (>= 2.4.75)',
+        'libexpat1 (>= 2.1~beta3)',
+        'libgbm1 (>= 17.1.0~rc2)',
+        'libglib2.0-0 (>= 2.37.3)',
+        'libgssapi-krb5-2 (>= 1.17)',
+        'libgtk-3-0 (>= 3.9.10)',
+        'libgtk-3-0 (>= 3.9.10) | libgtk-4-1',
+        'libkrb5-3 (>= 1.6.dfsg.2)',
+        'libnspr4 (>= 2:4.9-2~)',
+        'libnss3 (>= 2:3.30)',
+        'libnss3 (>= 3.26)',
+        'libpango-1.0-0 (>= 1.14.0)',
+        'libstdc++6 (>= 4.1.1)',
+        'libstdc++6 (>= 5)',
+        'libstdc++6 (>= 5.2)',
+        'libstdc++6 (>= 6)',
+        'libx11-6',
+        'libx11-6 (>= 2:1.4.99.1)',
+        'libxcb1 (>= 1.9.2)',
+        'libxcomposite1 (>= 1:0.4.4-1)',
+        'libxdamage1 (>= 1:1.1)',
+        'libxext6',
+        'libxfixes3',
+        'libxkbcommon0 (>= 0.5.0)',
+        'libxkbfile1 (>= 1:1.1.0)',
+        'libxrandr2',
+        'xdg-utils (>= 1.0.2)'
+    ],
+	'riscv64': [
+        'ca-certificates',
+        'libatomic1',
+        'libasound2 (>= 1.0.17)',
+        'libatk-bridge2.0-0 (>= 2.5.3)',
+        'libatk1.0-0 (>= 2.2.0)',
+        'libatspi2.0-0 (>= 2.9.90)',
+        'libc6 (>= 2.17)',
+        'libc6 (>= 2.28)',
+        'libcairo2 (>= 1.6.0)',
+        'libcurl3-gnutls | libcurl3-nss | libcurl4 | libcurl3',
+        'libdbus-1-3 (>= 1.0.2)',
+        'libdrm2 (>= 2.4.60)',
+        'libexpat1 (>= 2.0.1)',
+        'libgbm1 (>= 17.1.0~rc2)',
+        'libglib2.0-0 (>= 2.16.0)',
+        'libglib2.0-0 (>= 2.39.4)',
+        'libgtk-3-0 (>= 3.9.10)',
+        'libgtk-3-0 (>= 3.9.10) | libgtk-4-1',
+        'libnspr4 (>= 2:4.9-2~)',
+        'libnss3 (>= 2:3.22)',
+        'libnss3 (>= 3.26)',
+        'libpango-1.0-0 (>= 1.14.0)',
+        'libsecret-1-0 (>= 0.18)',
+        'libstdc++6 (>= 4.1.1)',
+        'libstdc++6 (>= 5)',
+        'libstdc++6 (>= 5.2)',
+        'libstdc++6 (>= 6)',
+        'libx11-6',
+        'libx11-6 (>= 2:1.4.99.1)',
+        'libxcb1 (>= 1.9.2)',
+        'libxcomposite1 (>= 1:0.4.4-1)',
+        'libxdamage1 (>= 1:1.1)',
+        'libxext6',
+        'libxfixes3',
+        'libxkbcommon0 (>= 0.4.1)',
+        'libxkbfile1',
+        'libxrandr2',
+        'xdg-utils (>= 1.0.2)'
     ]
 };
 //# sourceMappingURL=dep-lists.js.map
\ No newline at end of file
diff --git a/build/linux/debian/dep-lists.ts b/build/linux/debian/dep-lists.ts
index 4028370cd02..ff4df2f08cb 100644
--- a/build/linux/debian/dep-lists.ts
+++ b/build/linux/debian/dep-lists.ts
@@ -139,5 +139,84 @@ export const referenceGeneratedDepsByArch = {
 		'libxkbfile1 (>= 1:1.1.0)',
 		'libxrandr2',
 		'xdg-utils (>= 1.0.2)'
+	],
+	'ppc64el': [
+		'ca-certificates',
+		'libasound2 (>= 1.0.17)',
+		'libatk-bridge2.0-0 (>= 2.5.3)',
+		'libatk1.0-0 (>= 2.2.0)',
+		'libatspi2.0-0 (>= 2.9.90)',
+		'libc6 (>= 2.17)',
+		'libc6 (>= 2.28)',
+		'libcairo2 (>= 1.6.0)',
+		'libcurl3-gnutls | libcurl3-nss | libcurl4 | libcurl3',
+		'libdbus-1-3 (>= 1.9.14)',
+		'libdrm2 (>= 2.4.75)',
+		'libexpat1 (>= 2.1~beta3)',
+		'libgbm1 (>= 17.1.0~rc2)',
+		'libglib2.0-0 (>= 2.37.3)',
+		'libgssapi-krb5-2 (>= 1.17)',
+		'libgtk-3-0 (>= 3.9.10)',
+		'libgtk-3-0 (>= 3.9.10) | libgtk-4-1',
+		'libkrb5-3 (>= 1.6.dfsg.2)',
+		'libnspr4 (>= 2:4.9-2~)',
+		'libnss3 (>= 2:3.30)',
+		'libnss3 (>= 3.26)',
+		'libpango-1.0-0 (>= 1.14.0)',
+		'libstdc++6 (>= 4.1.1)',
+		'libstdc++6 (>= 5)',
+		'libstdc++6 (>= 5.2)',
+		'libstdc++6 (>= 6)',
+		'libx11-6',
+		'libx11-6 (>= 2:1.4.99.1)',
+		'libxcb1 (>= 1.9.2)',
+		'libxcomposite1 (>= 1:0.4.4-1)',
+		'libxdamage1 (>= 1:1.1)',
+		'libxext6',
+		'libxfixes3',
+		'libxkbcommon0 (>= 0.5.0)',
+		'libxkbfile1 (>= 1:1.1.0)',
+		'libxrandr2',
+		'xdg-utils (>= 1.0.2)'
+	],
+	'riscv64': [
+		'ca-certificates',
+		'libatomic1',
+		'libasound2 (>= 1.0.17)',
+		'libatk-bridge2.0-0 (>= 2.5.3)',
+		'libatk1.0-0 (>= 2.2.0)',
+		'libatspi2.0-0 (>= 2.9.90)',
+		'libc6 (>= 2.17)',
+		'libc6 (>= 2.28)',
+		'libcairo2 (>= 1.6.0)',
+		'libcurl3-gnutls | libcurl3-nss | libcurl4 | libcurl3',
+		'libdbus-1-3 (>= 1.0.2)',
+		'libdrm2 (>= 2.4.60)',
+		'libexpat1 (>= 2.0.1)',
+		'libgbm1 (>= 17.1.0~rc2)',
+		'libglib2.0-0 (>= 2.16.0)',
+		'libglib2.0-0 (>= 2.39.4)',
+		'libgtk-3-0 (>= 3.9.10)',
+		'libgtk-3-0 (>= 3.9.10) | libgtk-4-1',
+		'libnspr4 (>= 2:4.9-2~)',
+		'libnss3 (>= 2:3.22)',
+		'libnss3 (>= 3.26)',
+		'libpango-1.0-0 (>= 1.14.0)',
+		'libsecret-1-0 (>= 0.18)',
+		'libstdc++6 (>= 4.1.1)',
+		'libstdc++6 (>= 5)',
+		'libstdc++6 (>= 5.2)',
+		'libstdc++6 (>= 6)',
+		'libx11-6',
+		'libx11-6 (>= 2:1.4.99.1)',
+		'libxcb1 (>= 1.9.2)',
+		'libxcomposite1 (>= 1:0.4.4-1)',
+		'libxdamage1 (>= 1:1.1)',
+		'libxext6',
+		'libxfixes3',
+		'libxkbcommon0 (>= 0.4.1)',
+		'libxkbfile1',
+		'libxrandr2',
+		'xdg-utils (>= 1.0.2)'
 	]
 };
diff --git a/build/linux/debian/install-sysroot.js b/build/linux/debian/install-sysroot.js
index feca7d3fa9d..f075ebcba75 100644
--- a/build/linux/debian/install-sysroot.js
+++ b/build/linux/debian/install-sysroot.js
@@ -70,7 +70,10 @@ async function fetchUrl(options, retries = 10, retryDelay = 1000) {
         const timeout = setTimeout(() => controller.abort(), 30 * 1000);
         const version = '20240129-253798';
         try {
-            const response = await fetch(`https://api.github.com/repos/Microsoft/vscode-linux-build-agent/releases/tags/v${version}`, {
+            // if VSCODE_SYSROOT_REPO and VSCODE_SYSROOT_VERSION are set, use those instead
+            const repo = process.env['VSCODE_SYSROOT_REPO'] ?? 'Microsoft/vscode-linux-build-agent';
+            const actualVersion = process.env['VSCODE_SYSROOT_VERSION'] ?? version;
+            const response = await fetch(`https://api.github.com/repos/${repo}/releases/tags/v${actualVersion}`, {
                 headers: ghApiHeaders,
                 signal: controller.signal /* Typings issue with lib.dom.d.ts */
             });
@@ -79,7 +82,7 @@ async function fetchUrl(options, retries = 10, retryDelay = 1000) {
                 const contents = Buffer.from(await response.arrayBuffer());
                 const asset = JSON.parse(contents.toString()).assets.find((a) => a.name === options.assetName);
                 if (!asset) {
-                    throw new Error(`Could not find asset in release of Microsoft/vscode-linux-build-agent @ ${version}`);
+                    throw new Error(`Could not find asset in release of ${repo} @ ${actualVersion}`);
                 }
                 console.log(`Found asset ${options.assetName} @ ${asset.url}.`);
                 const assetResponse = await fetch(asset.url, {
@@ -134,6 +137,14 @@ async function getVSCodeSysroot(arch) {
             expectedName = `arm-rpi-linux-gnueabihf${prefix}.tar.gz`;
             triple = 'arm-rpi-linux-gnueabihf';
             break;
+	    case 'ppc64le':
+	             expectedName = `powerpc64le-linux-gnu${prefix}.tar.gz`;
+	             triple = `powerpc64le-linux-gnu`;
+	             break;
+	    case 'riscv64':
+	             expectedName = `riscv64-linux-gnu${prefix}.tar.gz`;
+	             triple = 'riscv64-linux-gnu';
+	             break;
     }
     console.log(`Fetching ${expectedName} for ${triple}`);
     const checksumSha256 = getVSCodeSysrootChecksum(expectedName);
diff --git a/build/linux/debian/install-sysroot.ts b/build/linux/debian/install-sysroot.ts
index aa417dcc722..58f0eeefeff 100644
--- a/build/linux/debian/install-sysroot.ts
+++ b/build/linux/debian/install-sysroot.ts
@@ -82,7 +82,10 @@ async function fetchUrl(options: IFetchOptions, retries = 10, retryDelay = 1000)
 		const timeout = setTimeout(() => controller.abort(), 30 * 1000);
 		const version = '20240129-253798';
 		try {
-			const response = await fetch(`https://api.github.com/repos/Microsoft/vscode-linux-build-agent/releases/tags/v${version}`, {
+			// if VSCODE_SYSROOT_REPO and VSCODE_SYSROOT_VERSION are set, use those instead
+			const repo = process.env['VSCODE_SYSROOT_REPO'] ?? 'Microsoft/vscode-linux-build-agent';
+			const actualVersion = process.env['VSCODE_SYSROOT_VERSION'] ?? version;
+			const response = await fetch(`https://api.github.com/repos/${repo}/releases/tags/v${actualVersion}`, {
 				headers: ghApiHeaders,
 				signal: controller.signal as any /* Typings issue with lib.dom.d.ts */
 			});
@@ -91,7 +94,7 @@ async function fetchUrl(options: IFetchOptions, retries = 10, retryDelay = 1000)
 				const contents = Buffer.from(await response.arrayBuffer());
 				const asset = JSON.parse(contents.toString()).assets.find((a: { name: string }) => a.name === options.assetName);
 				if (!asset) {
-					throw new Error(`Could not find asset in release of Microsoft/vscode-linux-build-agent @ ${version}`);
+					throw new Error(`Could not find asset in release of ${repo} @ ${actualVersion}`);
 				}
 				console.log(`Found asset ${options.assetName} @ ${asset.url}.`);
 				const assetResponse = await fetch(asset.url, {
@@ -151,6 +154,14 @@ export async function getVSCodeSysroot(arch: DebianArchString): Promise<string>
 			expectedName = `arm-rpi-linux-gnueabihf${prefix}.tar.gz`;
 			triple = 'arm-rpi-linux-gnueabihf';
 			break;
+		case 'ppc64el':
+			expectedName = `powerpc64le-linux-gnu${prefix}.tar.gz`;
+			triple = 'powerpc64le-linux-gnu'
+			break;
+		case 'riscv64':
+			expectedName = `riscv64-linux-gnu${prefix}.tar.gz`;
+			triple = 'riscv64-linux-gnu';
+			break;
 	}
 	console.log(`Fetching ${expectedName} for ${triple}`);
 	const checksumSha256 = getVSCodeSysrootChecksum(expectedName);
diff --git a/build/linux/debian/types.js b/build/linux/debian/types.js
index ce21d50e1a9..cadefc2aa4c 100644
--- a/build/linux/debian/types.js
+++ b/build/linux/debian/types.js
@@ -6,6 +6,6 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.isDebianArchString = isDebianArchString;
 function isDebianArchString(s) {
-    return ['amd64', 'armhf', 'arm64'].includes(s);
+    return ['amd64', 'armhf', 'arm64', 'ppc64el', 'riscv64'].includes(s);
 }
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/build/linux/debian/types.ts b/build/linux/debian/types.ts
index e97485ef128..24fe452f7fe 100644
--- a/build/linux/debian/types.ts
+++ b/build/linux/debian/types.ts
@@ -3,8 +3,8 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-export type DebianArchString = 'amd64' | 'armhf' | 'arm64';
+export type DebianArchString = 'amd64' | 'armhf' | 'arm64' | 'ppc64el' | 'riscv64';
 
 export function isDebianArchString(s: string): s is DebianArchString {
-	return ['amd64', 'armhf', 'arm64'].includes(s);
+	return ['amd64', 'armhf', 'arm64', 'ppc64el', 'riscv64'].includes(s);
 }
diff --git a/build/linux/rpm/dep-lists.js b/build/linux/rpm/dep-lists.js
index 8be477290bb..5841d4769de 100644
--- a/build/linux/rpm/dep-lists.js
+++ b/build/linux/rpm/dep-lists.js
@@ -314,6 +314,106 @@ exports.referenceGeneratedDepsByArch = {
         'rpmlib(FileDigests) <= 4.6.0-1',
         'rtld(GNU_HASH)',
         'xdg-utils'
+    ],
+    "ppc64le": [
+        'ca-certificates',
+        'ld-linux-x86-64.so.2()(64bit)',
+        'ld-linux-x86-64.so.2(GLIBC_2.3)(64bit)',
+        'ld64.so.2()(64bit)',
+        'ld64.so.2(GLIBC_2.17)(64bit)',
+        'libX11.so.6()(64bit)',
+        'libXcomposite.so.1()(64bit)',
+        'libXdamage.so.1()(64bit)',
+        'libXext.so.6()(64bit)',
+        'libXfixes.so.3()(64bit)',
+        'libXrandr.so.2()(64bit)',
+        'libasound.so.2()(64bit)',
+        'libasound.so.2(ALSA_0.9)(64bit)',
+        'libasound.so.2(ALSA_0.9.0rc4)(64bit)',
+        'libatk-1.0.so.0()(64bit)',
+        'libatk-bridge-2.0.so.0()(64bit)',
+        'libatspi.so.0()(64bit)',
+        'libc.so.6()(64bit)',
+        'libc.so.6(GLIBC_2.14)(64bit)',
+        'libc.so.6(GLIBC_2.17)(64bit)',
+        'libc.so.6(GLIBC_2.2.5)(64bit)',
+        'libc.so.6(GLIBC_2.28)(64bit)',
+        'libc.so.6(GLIBC_2.4)(64bit)',
+        'libc.so.6(GLIBC_2.9)(64bit)',
+        'libcairo.so.2()(64bit)',
+        'libcups.so.2()(64bit)',
+        'libcurl.so.4()(64bit)',
+        'libdbus-1.so.3()(64bit)',
+        'libdbus-1.so.3(LIBDBUS_1_3)(64bit)',
+        'libdl.so.2()(64bit)',
+        'libdl.so.2(GLIBC_2.17)(64bit)',
+        'libdrm.so.2()(64bit)',
+        'libexpat.so.1()(64bit)',
+        'libgbm.so.1()(64bit)',
+        'libgcc_s.so.1()(64bit)',
+        'libgcc_s.so.1(GCC_3.0)(64bit)',
+        'libgcc_s.so.1(GCC_3.4.4)(64bit)',
+        'libgio-2.0.so.0()(64bit)',
+        'libglib-2.0.so.0()(64bit)',
+        'libgobject-2.0.so.0()(64bit)',
+        'libgssapi_krb5.so.2()(64bit)',
+        'libgssapi_krb5.so.2(gssapi_krb5_2_MIT)(64bit)',
+        'libgtk-3.so.0()(64bit)',
+        'libkrb5.so.3()(64bit)',
+        'libkrb5.so.3(krb5_3_MIT)(64bit)',
+        'libm.so.6()(64bit)',
+        'libm.so.6(GLIBC_2.17)(64bit)',
+        'libm.so.6(GLIBC_2.2.5)(64bit)',
+        'libm.so.6(GLIBC_2.27)(64bit)',
+        'libnspr4.so()(64bit)',
+        'libnss3.so()(64bit)',
+        'libnss3.so(NSS_3.11)(64bit)',
+        'libnss3.so(NSS_3.12)(64bit)',
+        'libnss3.so(NSS_3.12.1)(64bit)',
+        'libnss3.so(NSS_3.2)(64bit)',
+        'libnss3.so(NSS_3.22)(64bit)',
+        'libnss3.so(NSS_3.3)(64bit)',
+        'libnss3.so(NSS_3.30)(64bit)',
+        'libnss3.so(NSS_3.4)(64bit)',
+        'libnss3.so(NSS_3.5)(64bit)',
+        'libnss3.so(NSS_3.9.2)(64bit)',
+        'libnssutil3.so()(64bit)',
+        'libnssutil3.so(NSSUTIL_3.12.3)(64bit)',
+        'libpango-1.0.so.0()(64bit)',
+        'libpthread.so.0()(64bit)',
+        'libpthread.so.0(GLIBC_2.17)(64bit)',
+        'libpthread.so.0(GLIBC_2.2.5)(64bit)',
+        'libpthread.so.0(GLIBC_2.3.2)(64bit)',
+        'libpthread.so.0(GLIBC_2.3.3)(64bit)',
+        'libsmime3.so()(64bit)',
+        'libsmime3.so(NSS_3.10)(64bit)',
+        'libsmime3.so(NSS_3.2)(64bit)',
+        'libssl3.so(NSS_3.28)(64bit)',
+        'libstdc++.so.6()(64bit)',
+        'libstdc++.so.6(CXXABI_1.3)(64bit)',
+        'libstdc++.so.6(CXXABI_1.3.5)(64bit)',
+        'libstdc++.so.6(CXXABI_1.3.8)(64bit)',
+        'libstdc++.so.6(CXXABI_1.3.9)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.11)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.14)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.15)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.18)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.19)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.20)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.21)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.22)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.5)(64bit)',
+        'libstdc++.so.6(GLIBCXX_3.4.9)(64bit)',
+        'libutil.so.1()(64bit)',
+        'libutil.so.1(GLIBC_2.2.5)(64bit)',
+        'libxcb.so.1()(64bit)',
+        'libxkbcommon.so.0()(64bit)',
+        'libxkbcommon.so.0(V_0.5.0)(64bit)',
+        'libxkbfile.so.1()(64bit)',
+        'rpmlib(FileDigests) <= 4.6.0-1',
+        'rtld(GNU_HASH)',
+        'xdg-utils'
     ]
 };
 //# sourceMappingURL=dep-lists.js.map
\ No newline at end of file
diff --git a/build/linux/rpm/dep-lists.ts b/build/linux/rpm/dep-lists.ts
index 24b18d504c8..924e62666f9 100644
--- a/build/linux/rpm/dep-lists.ts
+++ b/build/linux/rpm/dep-lists.ts
@@ -313,5 +313,105 @@ export const referenceGeneratedDepsByArch = {
 		'rpmlib(FileDigests) <= 4.6.0-1',
 		'rtld(GNU_HASH)',
 		'xdg-utils'
+	],
+	"ppc64le": [
+		'ca-certificates',
+		'ld-linux-x86-64.so.2()(64bit)',
+		'ld-linux-x86-64.so.2(GLIBC_2.3)(64bit)',
+		'ld64.so.2()(64bit)',
+		'ld64.so.2(GLIBC_2.17)(64bit)',
+		'libX11.so.6()(64bit)',
+		'libXcomposite.so.1()(64bit)',
+		'libXdamage.so.1()(64bit)',
+		'libXext.so.6()(64bit)',
+		'libXfixes.so.3()(64bit)',
+		'libXrandr.so.2()(64bit)',
+		'libasound.so.2()(64bit)',
+		'libasound.so.2(ALSA_0.9)(64bit)',
+		'libasound.so.2(ALSA_0.9.0rc4)(64bit)',
+		'libatk-1.0.so.0()(64bit)',
+		'libatk-bridge-2.0.so.0()(64bit)',
+		'libatspi.so.0()(64bit)',
+		'libc.so.6()(64bit)',
+		'libc.so.6(GLIBC_2.14)(64bit)',
+		'libc.so.6(GLIBC_2.17)(64bit)',
+		'libc.so.6(GLIBC_2.2.5)(64bit)',
+		'libc.so.6(GLIBC_2.28)(64bit)',
+		'libc.so.6(GLIBC_2.4)(64bit)',
+		'libc.so.6(GLIBC_2.9)(64bit)',
+		'libcairo.so.2()(64bit)',
+		'libcups.so.2()(64bit)',
+		'libcurl.so.4()(64bit)',
+		'libdbus-1.so.3()(64bit)',
+		'libdbus-1.so.3(LIBDBUS_1_3)(64bit)',
+		'libdl.so.2()(64bit)',
+		'libdl.so.2(GLIBC_2.17)(64bit)',
+		'libdrm.so.2()(64bit)',
+		'libexpat.so.1()(64bit)',
+		'libgbm.so.1()(64bit)',
+		'libgcc_s.so.1()(64bit)',
+		'libgcc_s.so.1(GCC_3.0)(64bit)',
+		'libgcc_s.so.1(GCC_3.4.4)(64bit)',
+		'libgio-2.0.so.0()(64bit)',
+		'libglib-2.0.so.0()(64bit)',
+		'libgobject-2.0.so.0()(64bit)',
+		'libgssapi_krb5.so.2()(64bit)',
+		'libgssapi_krb5.so.2(gssapi_krb5_2_MIT)(64bit)',
+		'libgtk-3.so.0()(64bit)',
+		'libkrb5.so.3()(64bit)',
+		'libkrb5.so.3(krb5_3_MIT)(64bit)',
+		'libm.so.6()(64bit)',
+		'libm.so.6(GLIBC_2.17)(64bit)',
+		'libm.so.6(GLIBC_2.2.5)(64bit)',
+		'libm.so.6(GLIBC_2.27)(64bit)',
+		'libnspr4.so()(64bit)',
+		'libnss3.so()(64bit)',
+		'libnss3.so(NSS_3.11)(64bit)',
+		'libnss3.so(NSS_3.12)(64bit)',
+		'libnss3.so(NSS_3.12.1)(64bit)',
+		'libnss3.so(NSS_3.2)(64bit)',
+		'libnss3.so(NSS_3.22)(64bit)',
+		'libnss3.so(NSS_3.3)(64bit)',
+		'libnss3.so(NSS_3.30)(64bit)',
+		'libnss3.so(NSS_3.4)(64bit)',
+		'libnss3.so(NSS_3.5)(64bit)',
+		'libnss3.so(NSS_3.9.2)(64bit)',
+		'libnssutil3.so()(64bit)',
+		'libnssutil3.so(NSSUTIL_3.12.3)(64bit)',
+		'libpango-1.0.so.0()(64bit)',
+		'libpthread.so.0()(64bit)',
+		'libpthread.so.0(GLIBC_2.17)(64bit)',
+		'libpthread.so.0(GLIBC_2.2.5)(64bit)',
+		'libpthread.so.0(GLIBC_2.3.2)(64bit)',
+		'libpthread.so.0(GLIBC_2.3.3)(64bit)',
+		'libsmime3.so()(64bit)',
+		'libsmime3.so(NSS_3.10)(64bit)',
+		'libsmime3.so(NSS_3.2)(64bit)',
+		'libssl3.so(NSS_3.28)(64bit)',
+		'libstdc++.so.6()(64bit)',
+		'libstdc++.so.6(CXXABI_1.3)(64bit)',
+		'libstdc++.so.6(CXXABI_1.3.5)(64bit)',
+		'libstdc++.so.6(CXXABI_1.3.8)(64bit)',
+		'libstdc++.so.6(CXXABI_1.3.9)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.11)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.14)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.15)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.18)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.19)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.20)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.21)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.22)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.5)(64bit)',
+		'libstdc++.so.6(GLIBCXX_3.4.9)(64bit)',
+		'libutil.so.1()(64bit)',
+		'libutil.so.1(GLIBC_2.2.5)(64bit)',
+		'libxcb.so.1()(64bit)',
+		'libxkbcommon.so.0()(64bit)',
+		'libxkbcommon.so.0(V_0.5.0)(64bit)',
+		'libxkbfile.so.1()(64bit)',
+		'rpmlib(FileDigests) <= 4.6.0-1',
+		'rtld(GNU_HASH)',
+		'xdg-utils'
 	]
 };
diff --git a/build/linux/rpm/types.js b/build/linux/rpm/types.js
index a20b9c2fe02..99a8cff7856 100644
--- a/build/linux/rpm/types.js
+++ b/build/linux/rpm/types.js
@@ -6,6 +6,6 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.isRpmArchString = isRpmArchString;
 function isRpmArchString(s) {
-    return ['x86_64', 'armv7hl', 'aarch64'].includes(s);
+    return ['x86_64', 'armv7hl', 'aarch64', 'ppc64le', 'riscv64'].includes(s);
 }
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/build/linux/rpm/types.ts b/build/linux/rpm/types.ts
index c6a01da1cf5..d94537e0c49 100644
--- a/build/linux/rpm/types.ts
+++ b/build/linux/rpm/types.ts
@@ -3,8 +3,8 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-export type RpmArchString = 'x86_64' | 'armv7hl' | 'aarch64';
+export type RpmArchString = 'x86_64' | 'armv7hl' | 'aarch64' | 'ppc64le' | 'riscv64';
 
 export function isRpmArchString(s: string): s is RpmArchString {
-	return ['x86_64', 'armv7hl', 'aarch64'].includes(s);
+	return ['x86_64', 'armv7hl', 'aarch64', 'ppc64le', 'riscv64'].includes(s);
 }
diff --git a/cli/src/update_service.rs b/cli/src/update_service.rs
index 4bec13d6e86..3debda1224a 100644
--- a/cli/src/update_service.rs
+++ b/cli/src/update_service.rs
@@ -214,6 +214,9 @@ pub enum Platform {
 	LinuxARM64Legacy,
 	LinuxARM32,
 	LinuxARM32Legacy,
+	LinuxPPC64LE,
+	LinuxPPC64LELegacy,
+	LinuxRISCV64,
 	DarwinX64,
 	DarwinARM64,
 	WindowsX64,
@@ -227,6 +230,8 @@ impl Platform {
 			Platform::LinuxX64 => Some("linux-x64".to_owned()),
 			Platform::LinuxARM64 => Some("linux-arm64".to_owned()),
 			Platform::LinuxARM32 => Some("linux-armhf".to_owned()),
+			Platform::LinuxPPC64LE => Some("linux-ppc64le".to_owned()),
+			Platform::LinuxRISCV64 => Some("linux-riscv64".to_owned()),
 			Platform::DarwinX64 => Some("darwin".to_owned()),
 			Platform::DarwinARM64 => Some("darwin-arm64".to_owned()),
 			Platform::WindowsX64 => Some("win32-x64-archive".to_owned()),
@@ -245,6 +250,9 @@ impl Platform {
 			Platform::LinuxARM64Legacy => "server-linux-legacy-arm64",
 			Platform::LinuxARM32 => "server-linux-armhf",
 			Platform::LinuxARM32Legacy => "server-linux-legacy-armhf",
+			Platform::LinuxPPC64LE => "server-linux-ppc64le",
+			Platform::LinuxPPC64LELegacy => "server-linux-legacy-ppc64le",
+			Platform::LinuxRISCV64 => "server-linux-riscv64",
 			Platform::DarwinX64 => "server-darwin",
 			Platform::DarwinARM64 => "server-darwin-arm64",
 			Platform::WindowsX64 => "server-win32-x64",
@@ -264,6 +272,9 @@ impl Platform {
 			Platform::LinuxARM64Legacy => "cli-linux-arm64",
 			Platform::LinuxARM32 => "cli-linux-armhf",
 			Platform::LinuxARM32Legacy => "cli-linux-armhf",
+			Platform::LinuxPPC64LE => "cli-linux-ppc64le",
+			Platform::LinuxPPC64LELegacy => "cli-linux-ppc64le",
+			Platform::LinuxRISCV64 => "cli-linux-riscv64",
 			Platform::DarwinX64 => "cli-darwin-x64",
 			Platform::DarwinARM64 => "cli-darwin-arm64",
 			Platform::WindowsARM64 => "cli-win32-arm64",
@@ -296,6 +307,10 @@ impl Platform {
 			Some(Platform::LinuxARM32)
 		} else if cfg!(all(target_os = "linux", target_arch = "aarch64")) {
 			Some(Platform::LinuxARM64)
+		} else if cfg!(all(target_os = "linux", target_arch = "ppc64le")) {
+			Some(Platform::LinuxPPC64LE)
+		} else if cfg!(all(target_os = "linux", target_arch = "riscv64")) {
+			Some(Platform::LinuxRISCV64)
 		} else if cfg!(all(target_os = "macos", target_arch = "x86_64")) {
 			Some(Platform::DarwinX64)
 		} else if cfg!(all(target_os = "macos", target_arch = "aarch64")) {
@@ -323,6 +338,9 @@ impl fmt::Display for Platform {
 			Platform::LinuxARM64Legacy => "LinuxARM64Legacy",
 			Platform::LinuxARM32 => "LinuxARM32",
 			Platform::LinuxARM32Legacy => "LinuxARM32Legacy",
+			Platform::LinuxPPC64LE => "LinuxPPC64LE",
+			Platform::LinuxPPC64LELegacy => "LinuxPPC64LELegacy",
+			Platform::LinuxRISCV64 => "LinuxRISCV64",
 			Platform::DarwinX64 => "DarwinX64",
 			Platform::DarwinARM64 => "DarwinARM64",
 			Platform::WindowsX64 => "WindowsX64",
diff --git a/cli/src/util/prereqs.rs b/cli/src/util/prereqs.rs
index 5d4953acbb2..f22ff60e391 100644
--- a/cli/src/util/prereqs.rs
+++ b/cli/src/util/prereqs.rs
@@ -74,6 +74,10 @@ impl PreReqChecker {
 					Platform::LinuxX64
 				} else if cfg!(target_arch = "arm") {
 					Platform::LinuxARM32
+				} else if cfg!(target_arch = "ppc64le") {
+					Platform::LinuxPPC64LE
+				} else if cfg!(target_arch = "riscv64") {
+					Platform::LinuxRISCV64
 				} else {
 					Platform::LinuxARM64
 				});
@@ -83,6 +87,8 @@ impl PreReqChecker {
 					Platform::LinuxX64Legacy
 				} else if cfg!(target_arch = "arm") {
 					Platform::LinuxARM32Legacy
+				} else if cfg!(target_arch = "ppc64le") {
+					Platform::LinuxPPC64LELegacy
 				} else {
 					Platform::LinuxARM64Legacy
 				});
diff --git a/resources/server/bin/helpers/check-requirements-linux.sh b/resources/server/bin/helpers/check-requirements-linux.sh
index 079557869e3..c057746b870 100644
--- a/resources/server/bin/helpers/check-requirements-linux.sh
+++ b/resources/server/bin/helpers/check-requirements-linux.sh
@@ -50,6 +50,8 @@ case $ARCH in
 			LDCONFIG_ARCH="AArch64"
 		fi
 		;;
+    ppc64el) LDCONFIG_ARCH="64bit";;
+    riscv64) LDCONFIG_ARCH="RISC-V";;
 esac
 
 if [ "$OS_ID" != "alpine" ]; then
diff --git a/src/vs/platform/extensionManagement/common/extensionManagement.ts b/src/vs/platform/extensionManagement/common/extensionManagement.ts
index 183f2582871..e13fe72513c 100644
--- a/src/vs/platform/extensionManagement/common/extensionManagement.ts
+++ b/src/vs/platform/extensionManagement/common/extensionManagement.ts
@@ -39,6 +39,8 @@ export function TargetPlatformToString(targetPlatform: TargetPlatform) {
 		case TargetPlatform.LINUX_X64: return 'Linux 64 bit';
 		case TargetPlatform.LINUX_ARM64: return 'Linux ARM 64';
 		case TargetPlatform.LINUX_ARMHF: return 'Linux ARM';
+		case TargetPlatform.LINUX_PPC64LE: return 'Linux PowerPC64';
+		case TargetPlatform.LINUX_RISCV64: return 'Linux RISC-V 64';
 
 		case TargetPlatform.ALPINE_X64: return 'Alpine Linux 64 bit';
 		case TargetPlatform.ALPINE_ARM64: return 'Alpine ARM 64';
@@ -62,6 +64,8 @@ export function toTargetPlatform(targetPlatform: string): TargetPlatform {
 		case TargetPlatform.LINUX_X64: return TargetPlatform.LINUX_X64;
 		case TargetPlatform.LINUX_ARM64: return TargetPlatform.LINUX_ARM64;
 		case TargetPlatform.LINUX_ARMHF: return TargetPlatform.LINUX_ARMHF;
+		case TargetPlatform.LINUX_PPC64LE: return TargetPlatform.LINUX_PPC64LE;
+		case TargetPlatform.LINUX_RISCV64: return TargetPlatform.LINUX_RISCV64;
 
 		case TargetPlatform.ALPINE_X64: return TargetPlatform.ALPINE_X64;
 		case TargetPlatform.ALPINE_ARM64: return TargetPlatform.ALPINE_ARM64;
@@ -97,6 +101,12 @@ export function getTargetPlatform(platform: Platform | 'alpine', arch: string |
 			if (arch === 'arm') {
 				return TargetPlatform.LINUX_ARMHF;
 			}
+			if (arch === 'ppc64le') {
+				return TargetPlatform.LINUX_PPC64LE;
+			}
+			if (arch === 'riscv64') {
+				return TargetPlatform.LINUX_RISCV64;
+			}
 			return TargetPlatform.UNKNOWN;
 
 		case 'alpine':
diff --git a/src/vs/platform/extensions/common/extensions.ts b/src/vs/platform/extensions/common/extensions.ts
index cfe5313b905..fe14a21f0e8 100644
--- a/src/vs/platform/extensions/common/extensions.ts
+++ b/src/vs/platform/extensions/common/extensions.ts
@@ -304,6 +304,8 @@ export const enum TargetPlatform {
 	LINUX_X64 = 'linux-x64',
 	LINUX_ARM64 = 'linux-arm64',
 	LINUX_ARMHF = 'linux-armhf',
+	LINUX_PPC64LE = 'linux-ppc64le',
+	LINUX_RISCV64 = 'linux-riscv64',
 
 	ALPINE_X64 = 'alpine-x64',
 	ALPINE_ARM64 = 'alpine-arm64',
