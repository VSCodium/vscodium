--- a/vscode/src/vs/workbench/contrib/chat/common/languageModelToolsService.ts
+++ b/vscode/src/vs/workbench/contrib/chat/common/languageModelToolsService.ts
@@ -155,6 +155,7 @@
	toolResultMessage?: string | IMarkdownString;
	toolResultDetails?: Array<URI | Location> | IToolResultInputOutputDetails;
	toolResultError?: string;
+	displayType?: 'file-list' | 'test-report';
 }

 export function toolResultHasBuffers(result: IToolResult): boolean {
--- a/vscode/extensions/sample-tool-extension/extension.ts
+++ b/vscode/extensions/sample-tool-extension/extension.ts
@@ -19,10 +19,30 @@
                         reject(new Error(stderr));
                         return;
                     }
+
+                    const files = stdout.split('\n')
+                        .slice(1) // remove total
+                        .filter(line => line)
+                        .map(line => {
+                            const parts = line.split(/\s+/);
+                            return {
+                                permissions: parts[0],
+                                owner: parts[2],
+                                group: parts[3],
+                                size: parts[4],
+                                date: `${parts[5]} ${parts[6]} ${parts[7]}`,
+                                name: parts[8],
+                            };
+                        });
+
                     resolve({
+                        displayType: 'file-list',
                         content: [{
-                            kind: 'text',
-                            value: stdout
+                            kind: 'data',
+                            value: {
+                                mimeType: 'application/vnd.vscode.file-list+json',
+                                data: Buffer.from(JSON.stringify(files))
+                            }
                         }]
                     });
                 });
--- /dev/null
+++ b/vscode/src/vs/workbench/contrib/chat/browser/chatContentParts/chatFileListRenderer.ts
@@ -0,0 +1,54 @@
+import * as dom from '../../../../../../base/browser/dom.js';
+import { Emitter } from '../../../../../../base/common/event.js';
+import { Disposable } from '../../../../../../base/common/lifecycle.js';
+import { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';
+import { IChatContentPart, IChatContentPartRenderContext } from './chatContentParts.js';
+import { IToolResultDataPart } from '../../../common/languageModelToolsService.js';
+
+interface IFileListItem {
+    name: string;
+    permissions: string;
+    owner: string;
+    group: string;
+    size: string;
+    date: string;
+}
+
+export class ChatFileListRenderer extends Disposable implements IChatContentPart {
+    public readonly domNode: HTMLElement;
+
+    private _onDidChangeHeight = this._register(new Emitter<void>());
+    public readonly onDidChangeHeight = this._onDidChangeHeight.event;
+
+    constructor(
+        private readonly data: IToolResultDataPart,
+        private readonly context: IChatContentPartRenderContext,
+        @IInstantiationService private readonly instantiationService: IInstantiationService,
+    ) {
+        super();
+        this.domNode = dom.$('.chat-file-list-renderer');
+        this.render();
+    }
+
+    private render(): void {
+        const fileList: IFileListItem[] = JSON.parse(this.data.value.data.toString());
+
+        const table = dom.append(this.domNode, dom.$('table'));
+        const thead = dom.append(table, dom.$('thead'));
+        const tbody = dom.append(table, dom.$('tbody'));
+
+        const headerRow = dom.append(thead, dom.$('tr'));
+        dom.append(headerRow, dom.$('th', undefined, 'Permissions'));
+        dom.append(headerRow, dom.append(dom.$('th'), dom.$('pre', undefined, 'Owner')));
+        dom.append(headerRow, dom.append(dom.$('th'), dom.$('pre', undefined, 'Group')));
+        dom.append(headerRow, dom.append(dom.$('th'), dom.$('pre', undefined, 'Size')));
+        dom.append(headerRow, dom.append(dom.$('th'), dom.$('pre', undefined, 'Date')));
+        dom.append(headerRow, dom.append(dom.$('th'), dom.$('pre', undefined, 'Name')));
+
+        for (const file of fileList) {
+            const row = dom.append(tbody, dom.$('tr'));
+            dom.append(row, dom.append(dom.$('td'), dom.$('pre', undefined, file.permissions)));
+            dom.append(row, dom.append(dom.$('td'), dom.$('pre', undefined, file.owner)));
+            dom.append(row, dom.append(dom.$('td'), dom.$('pre', undefined, file.group)));
+            dom.append(row, dom.append(dom.$('td'), dom.$('pre', undefined, file.size)));
+            dom.append(row, dom.append(dom.$('td'), dom.$('pre', undefined, file.date)));
+            dom.append(row, dom.append(dom.$('td'), dom.$('pre', undefined, file.name)));
+        }
+    }
+
+    hasSameContent(other: any): boolean {
+        return other.kind === 'data' && other.value.mimeType === 'application/vnd.vscode.file-list+json';
+    }
+}
--- a/vscode/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolInvocationPart.ts
+++ b/vscode/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolInvocationPart.ts
@@ -24,6 +24,7 @@
 import { ToolConfirmationSubPart } from './chatToolConfirmationSubPart.js';
 import { BaseChatToolInvocationSubPart } from './chatToolInvocationSubPart.js';
 import { ChatToolProgressSubPart } from './chatToolProgressPart.js';
+import { ChatFileListRenderer } from '../chatFileListRenderer.js';

 export class ChatToolInvocationPart extends Disposable implements IChatContentPart {
	public readonly domNode: HTMLElement;
@@ -100,6 +101,13 @@
		if (Array.isArray(this.toolInvocation.resultDetails) && this.toolInvocation.resultDetails?.length) {
			return this.instantiationService.createInstance(ChatResultListSubPart, this.toolInvocation, this.context, this.toolInvocation.pastTenseMessage ?? this.toolInvocation.invocationMessage, this.toolInvocation.resultDetails, this.listPool);
		}
+
+		if (this.toolInvocation.result?.displayType === 'file-list') {
+			const dataPart = this.toolInvocation.result.content[0];
+			if (dataPart.kind === 'data') {
+				return this.instantiationService.createInstance(ChatFileListRenderer, dataPart, this.context);
+			}
+		}

		if (isToolResultInputOutputDetails(this.toolInvocation.resultDetails)) {
			return this.instantiationService.createInstance(
