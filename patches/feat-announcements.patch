diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
index 9564618..35cde81 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
@@ -116,2 +116,3 @@ type GettingStartedActionEvent = {
 type RecentEntry = (IRecentFolder | IRecentWorkspace) & { id: string };
+type AnnouncementEntry = { id: string, title: string, url: string };
 
@@ -148,2 +149,4 @@ export class GettingStartedPage extends EditorPane {
 	private gettingStartedList?: GettingStartedIndexList<IResolvedWalkthrough>;
+	private announcementList?: GettingStartedIndexList<AnnouncementEntry>;
+	private announcementData?: AnnouncementEntry[];
 
@@ -767,2 +770,3 @@ export class GettingStartedPage extends EditorPane {
 		const gettingStartedList = this.buildGettingStartedWalkthroughsList();
+		const announcementList = await this.buildAnnouncementList();
 
@@ -777,3 +781,3 @@ export class GettingStartedPage extends EditorPane {
 				this.container.classList.remove('noWalkthroughs');
-				reset(leftColumn, startList.getDomElement(), recentList.getDomElement());
+				reset(leftColumn, startList.getDomElement(), recentList.getDomElement(), announcementList.getDomElement());
 				reset(rightColumn, gettingStartedList.getDomElement());
@@ -783,3 +787,3 @@ export class GettingStartedPage extends EditorPane {
 				this.container.classList.add('noWalkthroughs');
-				reset(leftColumn, startList.getDomElement());
+				reset(leftColumn, startList.getDomElement(), announcementList.getDomElement());
 				reset(rightColumn, recentList.getDomElement());
@@ -930,2 +934,41 @@ export class GettingStartedPage extends EditorPane {
 
+	private async buildAnnouncementList(): Promise<GettingStartedIndexList<AnnouncementEntry>> {
+		const renderRecent = (announcement: AnnouncementEntry) => {
+			const { title, url } = announcement;
+			const li = $('li');
+
+			const anchor: HTMLLinkElement = $('a');
+			anchor.href = url;
+			anchor.innerText = title;
+			anchor.target = '_blank';
+			li.appendChild(anchor);
+
+			return li;
+		};
+
+		if (this.announcementList) { this.announcementList.dispose(); }
+
+		const announcementList = this.announcementList = new GettingStartedIndexList({
+			title: localize('announcements', "VSCodium Announcements"),
+			klass: 'announcements',
+			limit: 5,
+			empty: $('.empty-recent', {}, localize('noAnnouncements', "There is no announcements.")),
+			renderElement: renderRecent,
+			contextService: this.contextService
+		});
+
+		if (!this.announcementData) {
+			const branch = this.productService.quality === 'insider' ? 'insider' : 'master';
+			const res = await fetch(`https://raw.githubusercontent.com/VSCodium/vscodium/${branch}/announcements.json`);
+
+			if (res.ok) {
+				this.announcementData = await res.json() as AnnouncementEntry[];
+			}
+		}
+
+		announcementList.setEntries(this.announcementData);
+
+		return announcementList;
+	}
+
 	private buildStartList(): GettingStartedIndexList<IWelcomePageStartEntry> {
